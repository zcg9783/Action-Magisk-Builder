name: Magisk Build (25200)

on:
  workflow_dispatch:
    inputs:
      MAGISK_REPO:
        description: 'Magisk Repository'
        required: true
        default: 'https://github.com/topjohnwu/Magisk'
      MAGISK_BRANCH:
        description: 'Magisk Repository Branch'
        required: true
        default: 'v25.2'

jobs:
  build:
    name: Build Magisk
    runs-on: ubuntu-22.04
    env:
      SCCACHE_DIRECT: false
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # 关键环境变量
      CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: "true"
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      RUST_BACKTRACE: "short"
      ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/magisk
      ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk/magisk
      # 设置兼容的 Rust 版本
      RUST_TOOLCHAIN: "nightly-2023-11-01"
    permissions:
      contents: write
    strategy:
      fail-fast: false
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Clone Magisk
        run: |
          git clone --recurse-submodules ${{ inputs.MAGISK_REPO }} -b ${{ inputs.MAGISK_BRANCH }} ./Magisk
          echo "MAGISK_VERS=$(awk -F'=' '/magisk.versionCode/ {print $2}' Magisk/gradle.properties)" >> $GITHUB_ENV

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rust-src

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install essential build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev unzip zlib1g-dev
          # 安装特定版本 protobuf 编译器
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip
          unzip protoc-3.19.4-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/
          sudo mv protoc/include/* /usr/local/include/
          protoc --version

      - name: Set up sccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          variant: sccache
          key: ${{ runner.os }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}
          max-size: 10000M

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up NDK
        run: cd Magisk && python build.py -v ndk
        shell: bash

      - name: Install cxxbridge-cmd with version pinning
        run: |
          # 创建必要的目录结构
          mkdir -p /usr/local/lib/android/sdk/ndk/magisk/toolchains/rust/bin
          
          # 使用正确的工具链安装 cxxbridge-cmd
          cargo +${{ env.RUST_TOOLCHAIN }} install cxxbridge-cmd --version 1.0.100 -j $(nproc) --force
          
          # 复制到 Magisk 构建目录
          cp ~/.cargo/bin/cxxbridge /usr/local/lib/android/sdk/ndk/magisk/toolchains/rust/bin/
          echo "cxxbridge installed at:"
          /usr/local/lib/android/sdk/ndk/magisk/toolchains/rust/bin/cxxbridge --version

      - name: Setup environment
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install --only-upgrade libstdc++6 -y

      - name: Apply Patch
        continue-on-error: true
        run: |
          cd Magisk
          echo 1

      - name: Build all
        run: |
          cd Magisk
          # 设置链接器标志解决兼容性问题
          export RUSTFLAGS="-C link-arg=-Wl,--allow-multiple-definition"
          # 执行完整构建
          ./build.py -v all

      - name: Stop gradle daemon
        run: cd Magisk && ./gradlew --stop

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: magisk-build-${{ github.run_id }}
          path: Magisk/out
          compression-level: 9

      - name: Upload to Release
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Magisk/out/app-release.apk
            Magisk/out/app-debug.apk
          name: Unofficial Magisk Build v${{ env.MAGISK_VERS }}
          tag_name: build-${{ github.run_id }}
          body: |
            ## Magisk ${{ env.MAGISK_VERS }} (v25.2)
            **Built on**: ${{ github.event.repository.updated_at }}
            **Commit**: ${{ github.sha }}
            
            ## Notes
            This is an unofficial build for testing and development purposes.
            Report issues to the original repository maintainers.